{
  "name": "cop",
  "version": "0.3.4",
  "description": "Filter stream of objects",
  "main": "index.js",
  "directories": {
    "test": "test",
    "example": "example"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelnisi/cop.git"
  },
  "devDependencies": {
    "tap": "0.4.x",
    "fstream": "0.1.x"
  },
  "engines": {
    "node": "0.10.x"
  },
  "keywords": [
    "filter",
    "object",
    "stream",
    "streams2"
  ],
  "author": {
    "name": "Michael Nisi",
    "email": "michael.nisi@gmail.com",
    "url": "http://michaelnisi.com"
  },
  "license": "MIT",
  "readme": "# cop - filter stream of objects\n\n[![Build Status](https://secure.travis-ci.org/michaelnisi/cop.png)](http://travis-ci.org/michaelnisi/cop)\n\n## Description\n\nThe cop [Node.js](http://nodejs.org/) module is a [Transform](http://nodejs.org/api/stream.html#stream_class_stream_transform) stream which is configurable to emit specific properties of objects written to it. Furthermore, if provided with a filter function, `cop` can be used to massage data. \n\n## Usage\n\n### Property value by name\n    \n    var cop = require('cop')\n      , Readable = require('stream').Readable\n\n    var objs = [\n      { thing: 'My hovercraft ' }\n    , { thing: 'is full ' }\n    , { thing: 'of eels.\\n' }\n    ]\n\n    var reader = new Readable({ objectMode:true })\n      , length = objs.length\n      , i = 0\n\n    reader._read = function () {\n      reader.push(i < length ? objs[i++] : null)\n    }\n\n    reader\n      .pipe(cop('thing'))\n      .pipe(process.stdout)\n\n### Filter function\n    \n    var cop = require('cop')\n      , fstream = require('fstream')\n      , reader = fstream.Reader({ path:process.cwd() })\n\n    reader\n      .pipe(cop(filter))\n      .pipe(process.stdout)\n\n    function filter (obj) {\n      return obj ? obj['path'] + '\\n' : undefined\n    }\n\n## Signature\n\n### cop(key)\n\nProvided a key, `cop` will emit the matching property of an object written to it. If the object has no matching property nothing is emitted.\n\n### cop(filter)\n\nAlternatively a filter function can be provided, which is executed before data is emitted, hence, provides an opportunity to massage the data. \n\n## Events\n\nSee [Stream](http://nodejs.org/api/stream.html)\n\n## Installation\n\nInstall with [npm](http://npmjs.org/):\n\n    npm install cop\n\n## License\n\n[MIT License](https://raw.github.com/michaelnisi/cop/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/michaelnisi/cop/issues"
  },
  "_id": "cop@0.3.4",
  "_from": "cop@0.3.x"
}
